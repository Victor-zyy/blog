
* interrupt and exception
exception: 
- ecall 
- div 0
- align memory

interrupt :
- timer
- ipi

  1. interrupt vector table *mtvec*

#+begin_src asm


	.section .entry, "ax", %progbits
	.align 3
	.globl _trap_handler
_trap_handler:
	TRAP_SAVE_AND_SETUP_SP_T0

	TRAP_SAVE_MEPC_MSTATUS 0

	TRAP_SAVE_GENERAL_REGS_EXCEPT_SP_T0

	TRAP_CALL_C_ROUTINE

	TRAP_RESTORE_GENERAL_REGS_EXCEPT_SP_T0

	TRAP_RESTORE_MEPC_MSTATUS 0

	TRAP_RESTORE_SP_T0

	mret

       //......
	la	a4, _trap_handler
	csrw	CSR_MTVEC, a4
       //......
#+end_src


  2. M-mode  default (S->M, M itself, U->M) -> stack switch

#+begin_src asm

.macro	TRAP_SAVE_AND_SETUP_SP_T0
	/* Swap TP and MSCRATCH */
	csrrw	tp, CSR_MSCRATCH, tp

	/* Save T0 in scratch space */
	REG_S	t0, SBI_SCRATCH_TMP0_OFFSET(tp)

	/*
	 * Set T0 to appropriate exception stack
	 *
	 * Came_From_M_Mode = ((MSTATUS.MPP < PRV_M) ? 1 : 0) - 1;
	 * Exception_Stack = TP ^ (Came_From_M_Mode & (SP ^ TP))
	 *
	 * Came_From_M_Mode = 0    ==>    Exception_Stack = TP
	 * Came_From_M_Mode = -1   ==>    Exception_Stack = SP
	 */
	csrr	t0, CSR_MSTATUS
	srl	t0, t0, MSTATUS_MPP_SHIFT
	and	t0, t0, PRV_M
	slti	t0, t0, PRV_M // MPP 0 U-mode , MPP 1 S-mode , MPP 2 M-mode
	add	t0, t0, -1
	xor	sp, sp, tp
	and	t0, t0, sp
	xor	sp, sp, tp
	xor	t0, tp, t0

	/* Save original SP on exception stack */
	REG_S	sp, (SBI_TRAP_REGS_OFFSET(sp) - SBI_TRAP_REGS_SIZE)(t0)

	/* Set SP to exception stack and make room for trap registers */
	add	sp, t0, -(SBI_TRAP_REGS_SIZE)

	/* Restore T0 from scratch space */
	REG_L	t0, SBI_SCRATCH_TMP0_OFFSET(tp)

	/* Save T0 on stack */
	REG_S	t0, SBI_TRAP_REGS_OFFSET(t0)(sp)

	/* Swap TP and MSCRATCH */
	csrrw	tp, CSR_MSCRATCH, tp
.endm
#+end_src
[[./img/2_stack_switch.png]]
     
3. call sbi_trap_handler (c function)

Befor calling the sbi_trap_handler (c function), the stack in M-mode is just like,
[[./img/2_m-mode_trap.png]]

* sbi_ecall mechanism

** function call procedure

#+begin_src c

#define SBI_ECALL(__num, __a0, __a1, __a2)                                    \
	({                                                                    \
		register unsigned long a0 asm("a0") = (unsigned long)(__a0);  \
		register unsigned long a1 asm("a1") = (unsigned long)(__a1);  \
		register unsigned long a2 asm("a2") = (unsigned long)(__a2);  \
		register unsigned long a7 asm("a7") = (unsigned long)(__num); \
		asm volatile("ecall"                                          \
			     : "+r"(a0)                                       \
			     : "r"(a1), "r"(a2), "r"(a7)                      \
			     : "memory");                                     \
		a0;                                                           \
	})

#define SBI_ECALL_1(__num, __a0) SBI_ECALL(__num, __a0, 0, 0)
#define sbi_ecall_console_putc(c) SBI_ECALL_1(SBI_EXT_0_1_CONSOLE_PUTCHAR, (c))

static inline void sbi_ecall_console_puts(const char *str)
{
	while (str && *str)
		sbi_ecall_console_putc(*str++);
}


void test_main(unsigned long a0, unsigned long a1)
{
	sbi_ecall_console_puts("\nTest payload running\n");
	while (1)
		wfi();
}

#+end_src


** significant function called

#+begin_src c
ecall backtrace

_trap_handler
+->sbi_trap_handler
   +->sbi_ecall_handler
     +->sbi_ecall_find_extension
       +->sbi_ecall_legacy_handler
	   +->sbi_putc
#+end_src


** register
in the initialization of sbi_init, the ecall_extension will be registered, each one we say as it a extension and each one has a unique struct to point to. This function *sbi_ecall_extension_register* linked every extension struct in a linked-list, each of the instant will be initialilization before the function called. After that, when the ecall goes into the *sbi_ecall_trap_handler*, it will find the extension instant by the extid. Then it will call the handle of the extension, which is a handler to handle different funcids below the same extid. Finally it will call platform related function to answer it.

The whole procedure is just like this,
[[./img/2_sbi_ecall_extension.png]]


* interrupt delegation

M-mode timer interrupt delegate to S-mode to handle.
In the sbi_hart_init function it will call delegate_traps function, which delegate some interrupts and exceptions to S mode to handle when it happens.

interrupts:
- software interrupt like ipi
- software timer interrupt
- software external interrupt

exceptions:
- load page fault
- fetch page fault
- store page fault
- misaligned fetch
- breakpoint
- user ecall( U-mode) system call
  
There are some bits in the *medeleg* register. So use csrw instruction to write to them.

#+begin_src c


	/* Send M-mode interrupts and most exceptions to S-mode */
	interrupts = MIP_SSIP | MIP_STIP | MIP_SEIP;
       

	exceptions = (1U << CAUSE_MISALIGNED_FETCH) | (1U << CAUSE_BREAKPOINT) |
		     (1U << CAUSE_USER_ECALL);
	if (sbi_platform_has_mfaults_delegation(plat))
		exceptions |= (1U << CAUSE_FETCH_PAGE_FAULT) |
			      (1U << CAUSE_LOAD_PAGE_FAULT) |
			      (1U << CAUSE_STORE_PAGE_FAULT);

	csr_write(CSR_MIDELEG, interrupts);
	csr_write(CSR_MEDELEG, exceptions);

#+end_src

Note: by default, interrupt or exceptions all happened to M-mode , namely jumps to *mtvec* interrupt vector table in M-mode, as usual, it handles these cases but not actually handle them , set bit in *mip* to indicate S-mode interrupt or exceptions are pending. As long as the S-mode global interrupt or exception switch is on, the program will jump to S-mode *stvec* register to actually handle them after *mret*.

Let's us show you a S-mode timer interrupt to indicate that.
in Qemu, a rtc timer is in Clint peripheral, so we need to add a device in qemu-board, and add a device-tree node to parse that. The timer ticks every 100ns, which frequency is 10MHz, it is in ok state by default.

in s-mode timer init. 
Firstly i need to declare that we have two registers like mtime and mtimecmp, when the mtime is greater than mtime it will trigger an interrupt in M-mode. That's why we need to set the mtimecmp value first. Also, the mtime and mtimecmp registers are in M-mode, so we use ecall to handle this. Actually in S-mode, the rdtime will trigger an exception and read mtime, but qemu doesn't achieve this, it will immediately return a value of mtime.

#+begin_src c

static unsigned long get_ticks()
{
	unsigned long n;
	__asm__ __volatile__("rdtime %0" : "=r"(n));
	return n;
}
void reset_timer()
{
  /* set mtimecmp for about 1s + mtime */
  sbi_ecall_set_time(get_ticks() + TIME_SECOND_TICKS);
  /* enable interrupt */
  csr_set(CSR_SIE, MIP_STIP);
  /* enable global interrupt */
  csr_set(CSR_SSTATUS, SSTATUS_SIE);

}

#+end_src


After the interrupt happens
#+begin_src c
_trap_handler
+->sbi_trap_handler
   +->sbi_timer_process

   
void sbi_timer_process(void)
{
	csr_clear(CSR_MIE, MIP_MTIP); // clear the interrupt enable bit for m-mode timer interrupt
	csr_set(CSR_MIP, MIP_STIP); // delegate to S-mode timer interrupt
}

#+end_src


After *mret* instruction, the program will jump into smode trap handler table to run.

#+begin_src asm

	/* Set the entry of S mode vector handler */
	.section .entry, "ax", %progbits
	.align 2 // must align 4bytes boundry
	.global _do_exception_vector_s
_do_exception_vector_s:
	exception_entry

	la 	ra, ret_from_exception
	mv	a0, sp
	mv	a1, s4
	tail	do_exception_s

ret_from_exception:
	exception_exit
	sret

#+end_src

Both routines are the same in practical but a little different.The stack is like this,
[[./img/2_smode_stack.png]]

And the do_exception_s (a c function) will do the actually timer_handler. 
#+begin_src c

+->do_exception_s
  +->timer_irq_process

void timer_irq_process(){
  csr_clear(CSR_SIE, MIP_STIP);
  jtime++;
  reset_timer();
}
#+end_src

The most important thing is, in sbi_timer_process, it will erase the MIE bit of MTIP, but in reset timer it will enable it though.(which bothers me a lot).
