* PMA and PMP
Physical Memory Attribute and Physical memory Protection

* opensbi domain

domain mem region supported by PMP in each Core

[[./img/4_SMP.png]]

#+begin_src c
in warmboot and coldboot

+->sbi_init
 +->init_coldboot
  +->sbi_domain_finalize
  +->sbi_hart_pmp_configure
 
coldboot

+->sbi_init
 +->init_warmboot
  +->sbi_hart_pmp_configure

#+end_src

Let's see what will happen in sbi_domain_finalize

#+begin_src c
+->sbi_domain_finalize
 +->sbi_platform_domains_init
  +->platform_domains_init
   +->fdt_domains_populate
    +->fdt_iterate_each_domain
    +->__fdt_parse_domain
    +->sbi_domain_register  ------->struct sbi_domain
    
extern struct sbi_domain *hartid_to_domain_table[];
    
/** Representation of OpenSBI domain */
struct sbi_domain {
	/**
	 * Logical index of this domain
	 * Note: This set by sbi_domain_finalize() in the coldboot path
	 */
	u32 index;
	/**
	 * HARTs assigned to this domain
	 * Note: This set by sbi_domain_init() and sbi_domain_finalize()
	 * in the coldboot path
	 */
	struct sbi_hartmask assigned_harts;
	/** Name of this domain */
	char name[64];
	/** Possible HARTs in this domain */
	const struct sbi_hartmask *possible_harts;
	/** Array of memory regions terminated by a region with order zero */
	struct sbi_domain_memregion *regions;
	/** HART id of the HART booting this domain */
	u32 boot_hartid;
	/** Arg1 (or 'a1' register) of next booting stage for this domain */
	unsigned long next_arg1;
	/** Address of next booting stage for this domain */
	unsigned long next_addr;
	/** Privilege mode of next booting stage for this domain */
	unsigned long next_mode;
	/** Is domain allowed to reset the system */
	bool system_reset_allowed;
};

#+end_src

#+begin_src c
+->sbi_hart_pmp_configure
 +->pmp_set
#+end_src
This function will use the array of sbi_domain_memregion to initialize the PMPCFGn and PMPADDRn
And I wanna know why the opensbi get the PMPcount or something else, and the answer is in *sbi_hart_init* it will sniffer the csr of pmp_count and something related to initialize the *hartfeatures*, which demostrates the hart necessary and useful features.

[[./img/4_opensbi_domain.png]]

The usage is that I learned from *QuardStar-Tutorial* from QQXiaoming, you can define two domains, with one core run linux and another core runs freertos.

#+begin_src dts
opensbi-domains {
    compatible = "opensbi,domain,config";

    tmem: tmem {
        compatible = "opensbi,domain,memregion";
        base = <0x0 0x80400000>;
        order = <16>;
    };

    tuart: tuart {
        compatible = "opensbi,domain,memregion";
        base = <0x0 0x10001000>;
        order = <8>;
        mmio;
        devices = <&uart1>;
    };

    /* THis domain node protect all memory */
    allmem: allmem {
        compatible = "opensbi,domain,memregion";
        base = <0x0 0x0>;
        order = <64>;
    };

    tdomain: trusted-domain {
        compatible = "opensbi,domain,instance";
        possible-harts = <&cpu1>;
        regions = <&tmem 0x7>, <&tuart 0x7>;
        boot-hart = <&cpu1>;
        next-arg1 = <0x0 0x00000000>;
        next-addr = <0x0 0x80400000>;
        next-mode = <0x1>;
        system-reset-allowed;
    };

    udomain: untrusted-domain {
        compatible = "opensbi,domain,instance";
        possible-harts = <&cpu0>;
        regions = <&allmem 0x7>;
        boot-hart = <&cpu0>;
        next-arg1 = <0x0 0x00000000>;  
        next-addr = <0x0 0x80400000>;  
        next-mode = <0x1>;
        system-reset-allowed;
    };
};

#+end_src
* FDT Parse Function

Flattened Device Tree Structure
#+begin_src c

struct fdt_header {
	fdt32_t magic;			 /* magic word FDT_MAGIC */
	fdt32_t totalsize;		 /* total size of DT block */
	fdt32_t off_dt_struct;		 /* offset to structure */
	fdt32_t off_dt_strings;		 /* offset to strings */
	fdt32_t off_mem_rsvmap;		 /* offset to memory reserve map */
	fdt32_t version;		 /* format version */
	fdt32_t last_comp_version;	 /* last compatible version */

	/* version 2 fields below */
	fdt32_t boot_cpuid_phys;	 /* Which physical CPU id we're
					    booting on */
	/* version 3 fields below */
	fdt32_t size_dt_strings;	 /* size of the strings block */

	/* version 17 fields below */
	fdt32_t size_dt_struct;		 /* size of the structure block */
};

struct fdt_reserve_entry {
	fdt64_t address;
	fdt64_t size;
};

struct fdt_node_header {
	fdt32_t tag;
	char name[0];
};

struct fdt_property {
	fdt32_t tag;
	fdt32_t len;
	fdt32_t nameoff;
	char data[0];
};
#+end_src


#+begin_src c


#define fdt_get_header(fdt, field) \
	(fdt32_ld(&((const struct fdt_header *)(fdt))->field))
#define fdt_magic(fdt)			(fdt_get_header(fdt, magic))
#define fdt_totalsize(fdt)		(fdt_get_header(fdt, totalsize))
#define fdt_off_dt_struct(fdt)		(fdt_get_header(fdt, off_dt_struct))
#define fdt_off_dt_strings(fdt)		(fdt_get_header(fdt, off_dt_strings))
#define fdt_off_mem_rsvmap(fdt)		(fdt_get_header(fdt, off_mem_rsvmap))
#define fdt_version(fdt)		(fdt_get_header(fdt, version))
#define fdt_last_comp_version(fdt)	(fdt_get_header(fdt, last_comp_version))
#define fdt_boot_cpuid_phys(fdt)	(fdt_get_header(fdt, boot_cpuid_phys))
#define fdt_size_dt_strings(fdt)	(fdt_get_header(fdt, size_dt_strings))
#define fdt_size_dt_struct(fdt)		(fdt_get_header(fdt, size_dt_struct))

int fdt_path_offset_namelen(const void *fdt, const char *path, int namelen)
{


}
#+end_src
