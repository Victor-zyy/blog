* 1. sums of two
** question
Given a vector of nums(int), and target. Try to find two nums that the summation of the two equals target.
** example
1：
input：nums = [2,7,11,15], target = 9
output：[0,1]
explain： nums[0] + nums[1] == 9 ，返回 [0, 1] 。
2：
input：nums = [3,2,4], target = 6
output：[1,2]

** data structure
I use hashmap in c++ stl to solve this question. Hashmap documents the pair of num and position, then iterate the nums in the vector and find if the target-num is in hash. The complexity is O(N).
** solution
#+begin_src c++
  class Solution {
  public:
      vector<int> twoSum(vector<int>& nums, int target) {
          std::unordered_map<int, int> map;
          for(int i = 0; i < nums.size(); i++){
              auto it = map.find(target - nums[i]);
              if(it != map.end()){
                  // return {i, it->second};
                  return {i, map[target-nums[i]]};
              }else{
                  map[nums[i]] = i;
              }
          }
          return {};
      }
  };
#+end_src

* 2.Group Anagrams
Anagrams mean that you can rearrage the char of a string, and it belongs to the same group
** question
Given a vector of strings, print the several groups of anagrams.
** example
1:
input: strs = ["eat", "tea", "tan", "ate", "nat", "bat"]
output: [["bat"],["nat","tan"],["ate","eat","tea"]]

2:
input: strs = ["a"]
input: ["a"]

3:
input: strs = [""]
input: [""]
** data structure
Still use hashmap as main data structure, but we have to ensure what are used to as the key.
** solution
The anagrams have the same chars of a string, we can sort the string, then use it as the key.
#+begin_src c++
    class Solution {
    public:
      vector<vector<string>> groupAnagrams(vector<string>& strs) {
          // use sort
          unordered_map<string, vector<string>> map;
          for(auto &str : strs){
              string temp = str;
              sort(temp.begin(), temp.end());
              map[temp].emplace_back(str);
          }
          vector<vector<string>> vvstr;
          for(auto it = map.begin(); it != map.end(); it++){
              vvstr.emplace_back(it->second);
          }
          return vvstr;
      }
  };
#+end_src
Another solution is used the occurence num of each char as a string then as the key, so the hash is sometimes hard to write.
* 3.longest-consecutive-sequence
** introduction
Given the un-sortted vector of int, to the longest consecutive sequence, and return the length.
** example
1：
input : [100,4,200,1,3,2]
output: 4
2:
input：nums = [0,3,7,2,5,8,4,6,0,1]
output：9
3：
input：nums = [1,0,1,2]
output：3
** data structure
The example we use unordered_set which contains unique key. The complexity of this solution is O(N).
Even though it has two while-loop, but only the smallest of sequence can enter the while-loop.
** solution
#+begin_src c++
  class Solution {
  public:
      int longestConsecutive(vector<int>& nums) {
          sort(nums.begin(), nums.end());
          unordered_set<int> set_;
          for(auto &num : nums){
              set_.insert(num);
          }
          int cnt = 0;
          for(auto& num: set_){
              if(!set_.count(num - 1)){
                  int current_num = num;
                  int long_stk = 1;
                  while(set_.count(current_num + 1)){
                      long_stk ++;
                      current_num++;
                  }
                  cnt = max(cnt, long_stk);
              }
          }
          return cnt;
      }
  };
#+end_src
