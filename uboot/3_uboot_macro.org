* CONFIG_IS_ENABLED
Let's introduce the CONFIG_IS_ENABLED macro in *include/linux/kconfig.h* file.
example occurrence in *arch/cpu/riscv/start.S*

#+begin_src asm
#if CONFIG_IS_ENABLED(SMP)
#+end_src

#+begin_src c
#define CONFIG_IS_ENABLED(option, ...)					\
	__concat(__CONFIG_IS_ENABLED_, __count_args(option, ##__VA_ARGS__)) (option, ##__VA_ARGS__)
#+end_src
It use __concat macro, which is defined in the same file. concat simply means that connect two macro.
#+begin_src c
#define __concat(a, b)   ___concat(a, b)
#define ___concat(a, b)  a ## b
#+end_src

#+begin_src c
  /*
   ,* Count number of arguments to a variadic macro. Currently only need
   ,* it for 1, 2 or 3 arguments.
   ,*/

  #define __arg6(a1, a2, a3, a4, a5, a6, ...) a6
  #define __count_args(...) __arg6(dummy, ##__VA_ARGS__, 4, 3, 2, 1, 0)
#+end_src

When the macro is invoked, all the tokens in its argument list [...], including any commas, become the variable argument. This sequence of tokens replaces the identifier *__VA_ARGS__* in the macro body wherever it appears.
#+begin_src c

  #define __CONFIG_IS_ENABLED_1(option)        __CONFIG_IS_ENABLED_3(option, (1), (0))
  #define __CONFIG_IS_ENABLED_2(option, case1) __CONFIG_IS_ENABLED_3(option, case1, ())
  #define __CONFIG_IS_ENABLED_3(option, case1, case0) \
  	__concat(__unwrap, config_enabled(CONFIG_VAL(option))) (case1, case0)
#+end_src

#+begin_src c
  #define __ARG_PLACEHOLDER_1 0,
  #define config_enabled(cfg) _config_enabled(cfg)
  #define _config_enabled(value) __config_enabled(__ARG_PLACEHOLDER_##value)
  #define __config_enabled(arg1_or_junk) ___config_enabled(arg1_or_junk 1, 0)
  #define ___config_enabled(__ignored, val, ...) val
#+end_src

#+begin_src c
  #define CONFIG_VAL(option)  config_val(option)
#+end_src

#+begin_src c
  #define   config_val(cfg)       _config_val(_CONFIG_PREFIX, cfg)
  #define  _config_val(pfx, cfg) __config_val(pfx, cfg)
  #define __config_val(pfx, cfg) CONFIG_ ## pfx ## cfg
#+end_src

#+begin_src c
  #if defined(CONFIG_TPL_BUILD)
  #define _CONFIG_PREFIX TPL_
  #elif defined(CONFIG_SPL_BUILD)
  #define _CONFIG_PREFIX SPL_
  #else
  #define _CONFIG_PREFIX
  #endif
#+end_src

So we can translate the example into this below.
Let's assume the CONFIG_SMP is defined. in 
#include <generated/autoconf.h>
#+begin_src asm
  ->CONFIG_IS_ENABLED(SMP)
    ->__concat(__CONFIG_IS_ENABLED_, __count_args(SMP))(option, ##__VA_ARGS__)
      ->__concat(__CONFIG_IS_ENABLED_, __count_args(dummy, SMP, 4, 3, 2, 1, 0))...
        ->__concat(__CONFIG_IS_ENABLED_, __arg6(dummy, SMP, 4, 3, 2, 1, 0))...
  	->__concat(__CONFIG_IS_ENABLED_, 1)(SMP)
  	  ->__CONFIG_IS_ENABLED_1(SMP)
  	    ->__CONFIG_IS_ENABLED_3(SMP, (1), (0))
  	      ->__concat(__unwrap, config_enabled(CONFIG_VAL(SMP))) ( (1), (0))
  	        ->__concat(__unwrap, config_enabled(config_val(SMP))) ( (1), (0))
  	          ->__concat(__unwrap, config_enabled(_config_val(_CONFIG_PREFIX, SMP))) ( (1), (0))
  	          ->__concat(__unwrap, config_enabled(__config_val(_CONFIG_PREFIX, SMP))) ( (1), (0))
  	          ->__concat(__unwrap, config_enabled(CONFIG_SMP)) ( (1), (0))
  	          ->__concat(__unwrap, _config_enabled(CONFIG_SMP)) ( (1), (0))
  	          ->__concat(__unwrap, __config_enabled(0,)) ( (1), (0))
  	          ->__concat(__unwrap, ___config_enabled(0, 1, 0)) ( (1), (0))
  	          ->__concat(__unwrap, 1) ( (1), (0))
  	          ->__unwrap1( (1), (0))
  	          -> __unwrap(1)
  	          -> 1

#+end_src
