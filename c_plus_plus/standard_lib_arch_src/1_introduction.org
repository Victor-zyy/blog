* C++ Standard Library and Architectures
** c++ standard library and standard template library
c++ standard library > standard template library.
** stl six components
*** container 容器
*** allocator 分配器
*** algorithm 算法
*** iterator 迭代器
*** adapter 适配器
*** functor 仿函式

And the interconnections between these components are like this below.
[[file:./static/c_plus_plus/images/1_stl_component.png]]

example:
#+begin_src c++
#include <vector>
#include <algorithm>
#include <functional>
#include <iostream>

using namespace std;

int main(){

    int ia[6] = {27, 210, 12, 47, 109, 83};

    vector<int, allocator<int>> vi (ia, ia + 6);

    cout << count_if(vi.begin(), vi.end(),
            not1(bind2nd(less<int>(), 40)));

    return 0;

}
$ g++ -Wno-deprecated-declarations -std=c++11 -W a.cc 
#+end_src
This snippest of code is used to find the val in the vector which is greater than 40. And it will return the number of the val that corresponds this condition.
** header file
*** stl
#include <vector>
*** new c-style
#include <cstdio>
#include <cstdlib>
*** old c-style
#include <stdio.h>
** iterator
Close at the front and open at the end. Which means if we dereference the *vi.end(), it's undefind behavior which might cause error.
** range-base for statement (since c++11)
#+begin_src c++
  for(int i : { 1, 3, 5, 6, 0 , 10} )
    cout << i << " " << endl;

  vector<int> vec;
  for(auto elem : vec)
    cout << elem << endl;

  for(auto &elem: vec)
    elem *= 3;
#+end_src

** container
*** sequence containers
queue,list,array,vector,dequeue, forward-list
*** associative container
set/multiset, map/multimap -- rbtree
*** unordered container
unordered_set/map, unordered_multiset/multimap---hash bucket-chain
