* C-plus-plus profile
** object
- object based
  -class without pointer members
   -Complex
  -class with pointer members
   -String
- object oriented
  -inheritance
  -composition
  -delegation
** data and functions
- C type[data] [functions]---------------->variable in memory
- C++ class/struct [data, functions]------>object in memory
Note: the function of class only has one copy which means when you create class only data occupies memory.
** C-plus-plus coding program
.h/.cpp/.hpp never mind
** gurad declaration
#+begin_src c++
#progam once
//
#ifndef __COMPLEX__
#define __COMPLEX__


#endif
#+end_src

** Header Layout
1. class-delcaration
#+begin_src c++
class complex
{

}
#+end_src

2. class-definition
#+begin_src c++
complex::function ... ...
#+end_src

3. forward-declarations
#+begin_src c++
class complex;

#+end_src

** template
complex not only double real and image, maybe float or int
#+begin_src c++
template<typename T>
class complex
{

private:
  T re, ra;
}

complex<int> c1;
complex<double> c1;
#+end_src
** inline
when you define a function in class body
#+begin_src c++

class complex
{
public:
  complex (double r= 0, double i= 0)
    : re(r), im(i)
    {}
    
  complex& operator+=(const complex&);
  double real() const{return re;}
  double imag() const{return im;}

private:
  double re, ra;
  
  friend complex& __doapl (complex*, const complex&);
}
#+end_src

The real/imag function will be canditate for inline functions automatically.Btw, the way it becomes inline function depends on the complier and the complexity of the function itself.

* Constructor function (ctor)
** access level
public
protected ( which I don't give it to public interface and differs from private function I can use it)
protected example in 8_virtual_polymorphism.org file.
private are not allowed by outside of the class
#+begin_src c++

class complex
{
public:
  complex (double r= 0, double i= 0)
    : re(r), im(i)
    {}
    
  complex& operator+=(const complex&);
  double real() const{return re;}
  double imag() const{return im;}

private:
  double re, im;
  
  friend complex& __doapl (complex*, const complex&);
}

....
complex c1(2,1);
cout << c1.re; //not allowed
cout << c1.im; //not allowed

complex c1(2,1);
cout << c1.real(); 
cout << c1.imag();
#+end_src
** constructor (ctor)
1. function name is class
2. default argument
3. initialization list ( assignment not advised)
#+begin_src c++
public:
  complex (double r= 0, double i= 0)
    : re(r), im(i)
    {}

#+end_src

initialization stage:
- initialization *:re(r), im(i)*
- assignment
when you use assignment to initialize private variable are allowed but low-efficiency
#+begin_src c++
public:
  complex (double r= 0, double i= 0)
    { re = r; im = i;}
#+end_src

** ctor function overloading
That means ctor has multiple forms, actually the overloading function has different name viewed by compiler.
#+begin_src c++

void real(double r ) {re = r;}

viewed by compiler,

?real@Complex@@QBENXZ
?real@Complex@@QAENABN@Z
#+end_src

however, when you define two ctor functions.
#+begin_src c++

class complex
{
public:
  complex (double r= 0, double i= 0)
    : re(r), im(i)
    {}
  complex () : re(0), im(0) {}

...
complex c1;
complex c2();
#+end_src

These two functions are not allowed, that is because the compiler doesn't deccide which one to call when construct c1 and c2, i mean both the ctor functions are ok to called.

** private ctor

Singleton - design pattern, means just only one instance of a class.

#+begin_src c++
class A{
public:
  static A& getInstance();
  setup() { ... }
 
private:
  A();
  A(const A& rhs);
  ...
};
static A& A::getInstance(){
  static A a;
  return a;
}

...
A::getInstance().setup();
#+end_src

** const member function
Advice: member function 
1. might change the private value
2. might not change the private value
The function which not change the private value need to add *const* identifier.
The position of const need to add after the *)* before the *{* symbol
#+begin_src c++
double real() const{return re;}
double imag() const{return im;}

double real() {return re;}
double imag() {return im;}

// example
{
 const complex c1(2,1)
 cout << c1.real(); // error conflict!
 cout << c1.imag();
}
#+end_src
