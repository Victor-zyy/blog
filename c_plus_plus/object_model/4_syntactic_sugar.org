* auto (since c++ 11)
Using this keyword in c++ since c11, the compiler can deduce in the compilling time. If the typename is too long to write you can use it and let compiler to deduce.
#+begin_src c++
  list<string> c;
  list<string>::iterator ite;
  ite = find(c.begin(), c.end(), target);

  auto ite = find(c.begin(), c.end(), target);
#+end_src

* range-base for( since c++11)
In normal c++, we can use for-loop of type iterator or container.size to iterate the container. In c++11, it provides us a new for-loop.
#+begin_src c++
  for( decl : coll) {


  }
#+end_src
The first must be *declaration* and the second one must be a *container*. We can use in this example.
#+begin_src c++
  vector<double> vec;

  for(auto elem : vec ) // pass be value
  {
    cout << elem << endl;
  }

  for(auto &elem : vec ) // pass be reference
  {
    elem *= 2; // you can change 
    cout << elem << endl;
  }
#+end_src
When passing by value it needs to copy for every element, but passing by reference is more efficient. And you can change the actual value of elem in the vector.

* Reference
The reference in bottom is a smart pointer than pointer, but it will pretend to show the same thing as value, which means that the size equals and the address equals.
- sizeof(reference) ==sizeof( value)
- &reference == &value 

** Usage
Usually, reference is used in argument passing not in the declaration types.
passing by value and passing by reference can be use in the same way only differs in function declaration.And the reference is more efficient. Passing by pointer is confused with the reference, and reference is pointer at some point.
#+begin_src c++
  void func1(Cls* pobj) { pobj->.... }
  void func1(Cls& pobj) { pobj.... }
  void func1(Cls pobj)  { pobj.... }

  Cls obj;
  func1(&obj);
  func2(obj);
  func3(obj);
#+end_src

signature: without return type, the function name and argument and const suffix including.
if you define two functions like that it will cause compiler ambiguity.
#+begin_src c++
  double imag(const double& im) {}
  double imag(const double im) {}
#+end_src
