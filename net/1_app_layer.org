* Application Layer
* Protocol
http protocol

* API Usage
** socket
In use application layer, if two of programs
#+begin_src c
//lwip/include/lwip/sockets.h
int lwip_socket(int domain, int type, int protocol);
#define AF_UNSPEC       0
#define AF_INET         2
#define PF_INET         AF_INET
#define PF_UNSPEC       AF_UNSPEC
#if LWIP_COMPAT_SOCKETS
#define socket(a,b,c)         lwip_socket(a,b,c)
//net/lwip/include/lwip/opt.h:1083:#define LWIP_COMPAT_SOCKETS             1
#+end_src
AF_INET represents for IPv4 Internet protocols, in unix environments like linux kernel, if we use man page of socket, we get a bunch of type macros like AF_UNIX, AF_LOCAL,etc. But lwip in this version only supplys for the two options to select, but don't worry, the minum tcp/ip stack is what we love the most. After consuming the contents and design pattern, we can use more high-tech api in linux to finish our jobs.

For type options in lwip, there are two options for TCP/UDP/RAM. But that is enough for us to build a minimal httpd server.
#+begin_src c
/* Socket protocol types (TCP/UDP/RAW) */
#define SOCK_STREAM     1
#define SOCK_DGRAM      2
#define SOCK_RAW        3
#+end_src

#+begin_src c
#define IPPROTO_IP      0
#define IPPROTO_TCP     6
#define IPPROTO_UDP     17
#define IPPROTO_UDPLITE 136
#+end_src
The return value will be a integer specifed by lwip.
* User Program
A httpd user program runs on our riscv64-with-e1000card machine, and other user program like firefox can connect this server over the TCP/IP protocol, and transmit data using the http protocol in application layer.
** application socket
1. create a server socket
2.construct server sockaddr_in ip address and port
3.bind server socket
4.listen socket
5.accept and then handle_request
6.close the connection
#+begin_src c
void
umain(int argc, char **argv)
{
	int serversock, clientsock;
	struct sockaddr_in server, client;

	binaryname = "jhttpd";

	// Create the TCP socket
	if ((serversock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP)) < 0)
		die("Failed to create socket");

	// Construct the server sockaddr_in structure
	memset(&server, 0, sizeof(server));		// Clear struct
	server.sin_family = AF_INET;			// Internet/IP
	server.sin_addr.s_addr = htonl(INADDR_ANY);	// IP address
	server.sin_port = htons(PORT);			// server port

	// Bind the server socket
	if (bind(serversock, (struct sockaddr *) &server,
		 sizeof(server)) < 0)
	{
		die("Failed to bind the server socket");
	}

	// Listen on the server socket
	if (listen(serversock, MAXPENDING) < 0)
		die("Failed to listen on server socket");

	cprintf("Waiting for http connections...\n");

	while (1) {
		unsigned int clientlen = sizeof(client);
		// Wait for client connection
		if ((clientsock = accept(serversock,
					 (struct sockaddr *) &client,
					 &clientlen)) < 0)
		{
			die("Failed to accept client connection");
		}
		handle_client(clientsock);
	}

	close(serversock);
}
#+end_src
