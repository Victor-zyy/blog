* Net Qemu Configuration
** QEMU
Before, in qemu2.3
#+begin_src sh
QEMUOPTS += -net user -net nic,model=e1000 -redir tcp:$(PORT7)::7 \
	   -redir tcp:$(PORT80)::80 -redir udp:$(PORT7)::7 -net dump,file=qemu.pcap
#+end_src
After, in qemu 7.0 check the *qemu-options.hx* and /doc/about/removed-features.txt
#+begin_src sh
QEMUOPTS += -netdev user,id=n1,ipv6=off -device e1000,netdev=n1,mac=52:54:98:76:54:32 -nic user,hostfwd=tcp::$(PORT7)-:7 \
	   -nic user,hostfwd=tcp::$(PORT80)-:80 -nic user,hostfwd=udp::$(PORT7)-:7 -object filter-dump,id=id,netdev=n1,file=qemu.pcap #refer to qemu-options.hx in qemu-7.0.0
#+end_src
The right answer of configuration for e1000 nic in qemu, is like this.
Actually, a netdev is the base default configuration port for network.
#+begin_src sh
QEMUOPTS += -netdev  user,id=net0,ipv6=off,hostfwd=tcp::$(PORT7)-:7,hostfwd=tcp::$(PORT80)-:80,hostfwd=udp::$(PORT7)-:7 -device e1000,netdev=net0,mac=52:54:00:12:34:56
# redirection of network port
QEMUOPTS += -object filter-dump,id=netdump0,netdev=net0,file=qemu.pcap #refer to qemu-options.hx in qemu-7.0.0
#+end_src
After configured, all the warnings left away.
** dtb
In qemu, we can get the dtb file when the all configuration is ok, it will dump dtb format into a file, then we use dtc compiler to decompile the dtb to dts file, in that way, we can see the full configuration of the device tree of board that qemu supplied.

#+begin_src sh
/opt/riscv-qemu-7.0.0/bin/qemu-system-riscv64 -nographic -M virt,dumpdtb=virt.dtb -m 256M -serial mon:stdio -D qemu.log -smp 1 -bios ./opensbi/fw_jump.bin -drive if=pflash,unit=0,format=raw,file=obj/kern/kernel.img  -netdev user,id=n1,ipv6=off -device e1000,netdev=n1,mac=52:54:98:76:54:32 -nic user,hostfwd=tcp::26001-:7 -nic user,hostfwd=tcp::26002-:80 -nic user,hostfwd=udp::26001-:7 -object filter-dump,id=id,netdev=n1,file=qemu.pcap  
#+end_src

Options dumpdtb=file.dtb

Then you can decompile the Device Tree binary with:
#+begin_src sh

dtc -I dtb -O dts <your DTB> -o <dts filename>

e.g.

dtc -I dtb -O dts working.dtb -o /tmp/my_device_tree.dts
#+end_src

** qemu command
We see the e1000 is on, after checking the info network command.
#+begin_src
  (qemu) info network 
#net008: index=0,type=user,net=10.0.2.0,restrict=off
#net105: index=0,type=user,net=10.0.2.0,restrict=off
#net210: index=0,type=user,net=10.0.2.0,restrict=off
e1000.0: index=0,type=nic,model=e1000,macaddr=52:54:98:76:54:32
 \ n1: index=0,type=user,net=10.0.2.0,restrict=off
filters:
  - id: type=filter-dump,file=qemu.pcap,maxlen=65536,position=tail,status=on,insert=behind,netdev=n1,queue=all

#+end_src

#+begin_src sh
(qemu) info network 
e1000.0: index=0,type=nic,model=e1000,macaddr=52:54:00:12:34:56
 \ net0: index=0,type=user,net=10.0.2.0,restrict=off
filters:
  - netdump0: type=filter-dump,file=qemu.pcap,maxlen=65536,position=tail,status=on,insert=behind,netdev=net0,queue=all
(qemu) 

#+end_src

** pci/pcie
*** PCIE Root Complex
#+begin_src sh
zyy@ubuntu:~$ lspci -t -vvv | grep -i "root"
-[0000:00]-+-00.0  Advanced Micro Devices, Inc. [AMD] Renoir/Cezanne Root Complex
zyy@ubuntu:~$ 
#+end_src
*** PCIE Device
Type 0: PCIE endpoint, real device, Type 1: for PCIE switch, which is used for connect with other PCIE devices
Actually, in PCIE world, it's end-to-end connection not share bus, differing from PCI bus. For the most part, if we wanna use PCI device, we have to make sure that the PCIE to PCI bridge exists.
*** BDF
Format BB:DD.F
Bus Number: 8bits
Device Number: 5bits
Function Number: 3bits
#+begin_src sh
-[0000:00]-+-00.0  Advanced Micro Devices, Inc. [AMD] Renoir/Cezanne Root Complex
           +-00.2  Advanced Micro Devices, Inc. [AMD] Renoir/Cezanne IOMMU
           +-01.0  Advanced Micro Devices, Inc. [AMD] Renoir PCIe Dummy Host Bridge
zyy@ubuntu:~$ lspci -s 00:01.2 -v
00:01.2 PCI bridge: Advanced Micro Devices, Inc. [AMD] Renoir/Cezanne PCIe GPP Bridge (prog-if 00 [Normal decode])
	Flags: bus master, fast devsel, latency 0, IRQ 28, IOMMU group 1
	Bus: primary=00, secondary=01, subordinate=01, sec-latency=0
	I/O behind bridge: 00002000-00002fff [size=4K]
	Memory behind bridge: d0500000-d05fffff [size=1M]
	Prefetchable memory behind bridge: [disabled]
	Capabilities: <access denied>
	Kernel driver in use: pcieport
#+end_src
With the BDF number, we can use it to search the pci device.
*** Endpoint
Type 0 device may have many endpoints.
#+begin_src sh
+-08.1-[03]--+-00.0  Advanced Micro Devices, Inc. [AMD/ATI] Renoir
           |            +-00.1  Advanced Micro Devices, Inc. [AMD/ATI] Renoir Radeon High Definition Audio Controller
           |            +-00.2  Advanced Micro Devices, Inc. [AMD] Family 17h (Models 10h-1fh) Platform Security Processor
           |            +-00.3  Advanced Micro Devices, Inc. [AMD] Renoir/Cezanne USB 3.1
           |            +-00.4  Advanced Micro Devices, Inc. [AMD] Renoir/Cezanne USB 3.1
           |            +-00.5  Advanced Micro Devices, Inc. [AMD] Raven/Raven2/FireFlight/Renoir Audio Processor
           |            \-00.6  Advanced Micro Devices, Inc. [AMD] Family 17h (Models 10h-1fh) HD Audio Controller
#+end_src
*** RCIE
Root Complex Integrated Express Endpoint, devices that connetted to the root complex belong to this type.
*** root port
#+begin_src sh
+-01.2-[01]----00.0  Realtek Semiconductor Co., Ltd. RTL8822CE 802.11ac PCIe Wireless Network Adapter
#+end_src
Bridge used for devices that connectted to PCIE slot. [01] is a bus numberassigned by the system.
*** switch
** pcie ecam
*** pcie configuration space
in pcie device system, every device has 4KB configuration space. And in order to keep compability of PCI device , PCIE keeps the 64Bytes of the starting space the same as the PCI.
*** x86 arch
In x86 arch system, the bios will use the acpi to find all pci/pcie devices and then distribute space to every devices in memory mapping, then give the information to OS by *ecam*.
To get the ecam base address, use the acpidump and iasl tool in linux, we can see the BaseAddress in the tabel delow.
#+begin_src sh
zyy@ubuntu:~$ sudo acpidump -n MCFG -b
zyy@ubuntu:~$ iasl ./mcfg.dat; 
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 90
[00Ah 0010   6]                       Oem ID : "HUAWEI"
[010h 0016   8]                 Oem Table ID : "EDK2    "
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F8000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 90 48 55 41 57 45 49  // MCFG<.....HUAWEI
    0010: 45 44 4B 32 20 20 20 20 02 00 00 00 20 20 20 20  // EDK2    ....    
    0020: 13 00 00 01 00 00 00 00 00 00 00 00 00 00 00 F8  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....

#+end_src
After having known the ECAM base address, PCIE use BDF to construct the offset of each device configuration address. For example:
If we got a pcie device whose BDF number is 00:01.2 and ECAM base address is 0xf8000000, then the configuration address of this device is 0xf8000000 + (0 << 20) + (1 << 15) + (2 << 12); However in linux, we can use setpci to get the contents of the configuration space.
#+begin_src sh
zyy@ubuntu:~$ setpci -s 00:01.2 00.w
1022
zyy@ubuntu:~$ setpci -s 00:01.2 02.w
1634
zyy@ubuntu:~$ 
#+end_src
Remember that we have to align the address to access the memory, if we haven't done that, the memory controller won't issue the PCIE access.
However, for PCI device the shift number when use BDF is kinda different, that is because the PCI configuration space is only 64bytes in total, on the contray in PCIE is 4Kbytes.
Next configuration below shows the difference between PCI and PCIE.
#+begin_src c
	// for pci compatibility
	uint32_t v = // config-space
		(bus << 16) | (dev << 11) | (func << 8) | (offset);
	// for pcie
	uint32_t v = // config-space
		(bus << 20) | (dev << 15) | (func << 12) | (offset);
	// 0xfff 4096Bytes
#+end_src
In early i386, access mode is CAM, which has two io ports for CONFIG_ADDRESS and ADDRESS_DATA.But in recently arch of x86, they now use ECAM access mode to unitilize the PCIE device system.
#+begin_src c
// PCI "configuration mechanism one"
static uint32_t pci_conf1_addr_ioport = 0x0cf8;
static uint32_t pci_conf1_data_ioport = 0x0cfc;
#+end_src
*** riscv arch
Riscv64-qemu adopts ECAM mechanism to support PCIE configuration and Access, like below, It has PCIE_PIO and PCIE_MEM which means we have to map n'bytes length of memory to this space in order to use after initializing.
#+begin_src c
    [VIRT_PCIE_PIO] =    {  0x3000000,       0x10000 },
    [VIRT_PCIE_ECAM] =   { 0x30000000,    0x10000000 },
    [VIRT_PCIE_MMIO] =   { 0x40000000,    0x40000000 },
#+end_src
** pcie configuration header
The PCIE Configuration Header is shown below, that is the key point of PCIE when initializing PCIE device and scan the device.
[[file:./static/ZynexOS/images/8_PCIE_Configuration_Header.png]]
The most relevant part is Header Type, 6:0 bits are for Header Layout, the seventh bit specifies multi function device.
Header Layout - This field identifies the layout of the second part of the predefined header.
For Functions that implement a Type 0 Configuration Space Header the encoding 000 0000b must be
used.
For Functions that implement a Type 1 Configuration Space Header the encoding 000 0001b must be
used.
*** type 0 Header
[[file:./static/ZynexOS/images/8_PCIE_Type0_Configuration_Header.png]]
The most important thing for driver/user is the BASE address from 0x10 to 0x24h,
Power-up software can determine how much address space the Function requires by writing a value of all 1's to the register and then reading the value back. The Function will return 0's in all don't-care address bits, effectively specifying the address space required. Unimplemented Base Address registers are hardwired to zero.
There are two types of base address, one for memory and the other for I/O. The picture shows below.
[[file:./static/ZynexOS/images/8_Base_Address_Type.png]]
Bit 0 in all Base Address registers is read-only and used to determine whether the register maps into Memory or I/O Space. Base Address registers that map to Memory Space must return a 0b in bit 0. Base Address registers that map to I/O Space must return a 1b in bit 0b.
Base Address registers that map into Memory Space can be 32 bits or 64 bits wide (to support mapping into a 64-bit address space) with bit 0 hardwired to 0b. For Memory Base Address registers, bits 2 and 1 have an encoded meaning as shown in table below.
[[file:./static/ZynexOS/images/8_Base_Address_Memory.png]]
*** type 1 Header
** pcie scan
1.scan from root_bus
2.iterate the dev number, check the Header Type 
3.in each device number iterate every function number, read the Class Type number used for attach, addtional pci irq line number, and vendor_ID, and device_ID used for attach
4.pci_attach, using vendor/device id or class/subclass to attach real device
5.If found, run the attachfunction.
** pci_scan_bus
#+begin_src c
static int
pci_scan_bus(struct pci_bus *bus)
{
	int totaldev = 0;
	struct pci_func df;
	memset(&df, 0, sizeof(df));
	df.bus = bus;

	// 8bit for bus (256) bus
	// 5bit for dev (32) 3 bit for func (8)
	for (df.dev = 0; df.dev < 32; df.dev++) {
		uint32_t bhlc = pci_conf_read(&df, PCI_BHLC_REG);
		if (PCI_HDRTYPE_TYPE(bhlc) > 1)	    // Unsupported or no device
			continue;

		totaldev++;

		struct pci_func f = df;
		for (f.func = 0; f.func < (PCI_HDRTYPE_MULTIFN(bhlc) ? 8 : 1);
		     f.func++) {
			struct pci_func af = f;

			af.dev_id = pci_conf_read(&f, PCI_ID_REG);
			if (PCI_VENDOR(af.dev_id) == 0xffff)
				continue;

			uint32_t intr = pci_conf_read(&af, PCI_INTERRUPT_REG);
			af.irq_line = PCI_INTERRUPT_LINE(intr);

			af.dev_class = pci_conf_read(&af, PCI_CLASS_REG);
			if (pci_show_devs)
				pci_print_func(&af);
			pci_attach(&af);
		}
	}

	return totaldev;
}
#+end_src

** pci_attach
#+begin_src c

// pci_attach_vendor matches the vendor ID and device ID of a PCI device. key1
// and key2 should be the vendor ID and device ID respectively
struct pci_driver pci_attach_vendor[] = {
    {PCI_82540EM_VID, PCI_82540EM_DID, &pci_e1000_attach},
    { 0, 0, 0 },
};
static int __attribute__((warn_unused_result))
pci_attach_match(uint32_t key1, uint32_t key2,
                struct pci_driver *list, struct pci_func *pcif)
{
    uint32_t i;
    //cprintf("key1:%x key2:%x match key1:%x key2:%x\n", key1, key2, list[0].key1, list[0].key2);
    for (i = 0; list[i].attachfn; i++) {
            if (list[i].key1 == key1 && list[i].key2 == key2) {
                    int r = list[i].attachfn(pcif);
                    if (r > 0)
                            return r;
                    if (r < 0)
                            cprintf("pci_attach_match: attaching "
                                    "%x.%x (%p): %e\n",
                                    key1, key2, list[i].attachfn, r);
            }
    }
    return 0;
}

static int
pci_attach(struct pci_func *f)
{
    return
            pci_attach_match(PCI_CLASS(f->dev_class),
                                PCI_SUBCLASS(f->dev_class),
                                &pci_attach_class[0], f) ||
            pci_attach_match(PCI_VENDOR(f->dev_id),
                                PCI_PRODUCT(f->dev_id),
                                &pci_attach_vendor[0], f);
}
#+end_src
** pci_func_enable
#+begin_src c
// External PCI subsystem interface
void
pci_func_enable(struct pci_func *f)
{
	pci_conf_write(f, PCI_COMMAND_STATUS_REG,
		       PCI_COMMAND_IO_ENABLE |
		       PCI_COMMAND_MEM_ENABLE |
		       PCI_COMMAND_MASTER_ENABLE);

	uint32_t bar_width;
	uint32_t bar;
	for (bar = PCI_MAPREG_START; bar < PCI_MAPREG_END;
	     bar += bar_width)
	{
		uint32_t oldv = pci_conf_read(f, bar);

		bar_width = 4;
		pci_conf_write(f, bar, 0xffffffff);
		uint32_t rv = pci_conf_read(f, bar);

		// after setting all 1 to the BAR regs
		// and then re-read it will give the MAP_REG_TYPE
		// if the rv is zero, then the bar reg is useless
		if (rv == 0)
			continue;

		int regnum = PCI_MAPREG_NUM(bar);
		uint32_t base, size;
		if (PCI_MAPREG_TYPE(rv) == PCI_MAPREG_TYPE_MEM) {
			if (PCI_MAPREG_MEM_TYPE(rv) == PCI_MAPREG_MEM_TYPE_64BIT)
				bar_width = 8;

			size = PCI_MAPREG_MEM_SIZE(rv);
			base = PCI_MAPREG_MEM_ADDR(oldv);
			// for arch of riscv
			base = 0x40000000;
			oldv = 0x40000000;
			if (pci_show_addrs)
				cprintf("  mem region %d: %d bytes at 0x%x\n",
					regnum, size, base);
		} else {
			size = PCI_MAPREG_IO_SIZE(rv);
			base = PCI_MAPREG_IO_ADDR(oldv);
			base = 0x3000000;
			oldv = 0x3000000;
			if (pci_show_addrs)
				cprintf("  io region %d: %d bytes at 0x%x\n",
					regnum, size, base);
		}

		pci_conf_write(f, bar, oldv);
		f->reg_base[regnum] = base;
		f->reg_size[regnum] = size;

		if (size && !base)
			cprintf("PCI device %02x:%02x.%d (%04x:%04x) "
				"may be misconfigured: "
				"region %d: base 0x%x, size %d\n",
				f->bus->busno, f->dev, f->func,
				PCI_VENDOR(f->dev_id), PCI_PRODUCT(f->dev_id),
				regnum, base, size);
	}

	cprintf("PCI function %02x:%02x.%d (%04x:%04x) enabled\n",
		f->bus->busno, f->dev, f->func,
		PCI_VENDOR(f->dev_id), PCI_PRODUCT(f->dev_id));
}
#+end_src
Actually, in x86 arch, the base regs will return the real address if we write all 1's to the register, but in riscv arch, we have to assign the memory and IO memory to the regs depending the size of the mapping.
#+begin_src c
    [VIRT_PCIE_PIO] =    {  0x3000000,       0x10000 },
    [VIRT_PCIE_ECAM] =   { 0x30000000,    0x10000000 },
    [VIRT_PCIE_MMIO] =   { 0x40000000,    0x40000000 },
#+end_src
How to decode size and memory address mapping, here is the example written by the spec PCIE5.0.
Decode (I/O or memory) of the appropriate address space is disabled via the Command Register before sizing a
Base Address register. Software saves the original value of the Base Address register, writes a value of all 1's to the register, then reads it back.
Size calculation can be done from the 32 bit value read by first clearing encoding
information bits (bits 1:0 for I/O, bits 3:0 for memory), inverting all 32 bits (logical NOT), then incrementing by 1.
The resultant 32-bit value is the memory/I/O range size decoded by the register. Note that the upper 16 bits of the result is ignored if the Base Address register is for I/O and bits 31:16 returned zero upon read. The original value in the Base Address register is restored before re-enabling decode in the Command Register of the Function.
64-bit (memory) Base Address registers can be handled the same, except that the second 32 bit register is
considered an extension of the first (i.e., bits 63:32). Software writes a value of all 1's to both registers, reads them back, and combines the result into a 64-bit value. Size calculation is done on the 64-bit value.
** attach_function and driver_init
#+begin_src c
int 
pci_e1000_attach(struct pci_func *pcif)
{
    int r;
    // Step 1. after attach and then enable pci device
    pci_func_enable(pcif);


    // Step 2. MMIO communicate PCI device through memory
    cprintf("pcif->reg_base[0] : 0x%08lx pcif->reg_size[0] : 0x%08lx\n",
                                                                    pcif->reg_base[0], pcif->reg_size[0]);
    // BAR0 memory mapped
    e1000 = mmio_map_region(pcif->reg_base[0], pcif->reg_size[0]);
    cprintf("e1000_status : 0x%08x\n", e1000[E1000_STATUS]); 
    // Step 3. Transmit Initialization
    cprintf("Transmit Initialization Starting ....\n");
    transmit_init();
    // Step 4. Receive Initialization
    cprintf("Receive Initialization Starting ....\n");
    receive_init();
    return 1;
}
#+end_src
* LWIP (low level tcp/ip stack)
I will use another post arch to demostrate the stack and the port schedule, and the driver etc.
