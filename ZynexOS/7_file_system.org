* FileSystem Preliminary
** inode region
The data regions are divided into much larger (typically 8KB or more) data blocks, within which the file system stores file data and directory meta-data.
** data region
a file's inode holds critical meta-data about the file such as its stat attributes and pointers to its data blocks.
** jos/zynexos
our file system will not use inodes at all and instead will simply store all of a file's (or sub-directory's) meta-data within the (one and only) directory entry describing that file. 
** disk layout
The file system hides all of the layout of the inode or data block etc. on a hard-disk or cfi-flash. It supplied multiple interfaces for interacting blocks on the disk. These apis are all like read/write and etc.

* Sector and Block
Most disks are allowed to read or write per sector at one time, and the granularity of each sector is 512K or something else. But the block is used by the kernel aka operating system to operate. The size of the block has nothing to do with the sector.

We use 4K size of the sector, matching the processor's page size.

* Layout
** superblock
Not all the blocks are reserved to store the data regions or inode regions, we use the first two blocks to let the filesystem easy to find, also doc some significant information about the filesystem, like when the fs is mounted, and the timestamps of the fs, and the partition table etc.

superblock describes the information of the fs such as the block size, disk size, any meta-data required to find the root directory.

Layout diagram of the fs on the disk image.

** dir/file meta-data
The file or directory maintains a meta data of struct FIle , resides in disk/flash memory.
#+begin_src c
struct File {
	char f_name[MAXNAMELEN];	// filename
	off_t f_size;			// file size in bytes
	uint32_t f_type;		// file type

	// Block pointers.
	// A block is allocated iff its value is != 0.
	uint32_t f_direct[NDIRECT];	// direct blocks
	uint32_t f_indirect;		// indirect block

	// Pad out to 256 bytes; must do arithmetic in case we're compiling
	// fsformat on a 64-bit machine.
	uint8_t f_pad[256 - MAXNAMELEN - 8 - 4*NDIRECT - 4];
} __attribute__((packed));	// required only on some 64-bit machines
#+end_src
We maintain the invariant that the size of a directory-file is always a multiple of the file system's block size.

* fs_server
Known that, we tried to implenment a micro-kernel, so each fundamental infrastructure has to be a env or a proc, and if the normal env wants to get information or message from the fs_server, it should use the ipc message connections.

** source code
#+begin_src c
  +->umain
    +->serve_init
      +->fs_init
       +->fs_test
        +->serve
#+end_src

** serve

* spawn-micro kernel like exec
The spawn is like unix-style exec function, there is a little difference beween each, for it creates one env child and run itselt independently. Unlike exec in unix, it will dives into kernel mode and initialize the ustack, load the prog from the disk and then executes occupied the parent.

** procedure
1. read the prog form the disk using the fs/api interfaces, such as readn / read.
2. set up the child trap frame as with the stack.(args like ls -h/ -a).
3. map_segments
4. copy shared pages of the parent which is meaningful in exec.

** sharing
Why we need to copy shared pages from parent to the child, in the former labs, we don't use IO like file or somthing else, but now we've got file system and fd descriptors. If we still use the COW mechanism, then the pipes won't succeed. If the page is not marked as cow, then we won't be able to access the fd that the parent opened.

So we need copy directly when we meet the PTE_SHARE page attributes, this can be achieved easily in i386, but it is hard to do in riscv, that's because the riscv pde entry doesn't have the PTE_U valid.

* Shell
If we want to interact with shell, then we need a way to type it in u-mode, interrupt from u-mode for uart/serail/kbd is necessary.

** pipe
** re-direct output
* Bug Report
** pp_ref clear not finished
When the pp_ref is not zero, in bug cases, the pp_ref is 65535 (which is 0xffff in hex format), after add one value it will return zero, which causes some bugs hard to find.  Actually using *assert* is a great technique to quickly handle the bug when appearing.
#+begin_src c 
	assert(pg_info->pp_ref != 0);
#+end_src
However, the page when used we will call page_remove function to handle, it will call page_decref or page_free when the pp_ref equals to zero. It will be zero after free, when page_alloc function is called again, the page_ref is zero still, but the realtiy is not. /TODO/

Finally, I found the bug, it was in env_free, which calls the page_decref to increment the pp_ref of the page, so the page_ppref will go out of bound.

#+begin_src c
//
// Frees env e and all memory it uses.
//
void
env_free(struct Env *e)
{
	pte_t *pt;
	pte_t *pd0;
	pte_t *pd1;
	pte_t *pd2;
	uint64_t pdeno, pteno;
	uint64_t pde1no, pde2no;
	physaddr_t pa;

	// If freeing the current environment, switch to kern_pgdir
	// before freeing the page directory, just in case the page
	// gets reused.
	if (e == curenv)
	  load_satp_asid(PADDR(kern_pgdir), 0);

	// Note the environment's demise.
	//cprintf("[%08x] free env %08x\n", curenv ? curenv->env_id : 0, e->env_id);

	// Flush all mapped pages in the user portion of the address space
	static_assert(UTOP % PTSIZE == 0);
	// you have to free the 4-level pages recrusively
	// only look at mapped page tables
	// PD0X is for the user definitly

	pdeno = 0;
	if (e->env_pgdir[pdeno] & PTE_V){
	  // find the pa and va of the page table
	  pa = PTE_ADDR(e->env_pgdir[pdeno]);
	  pd1 = (pde_t*) KADDR(pa);

	  for(pde1no = 0; pde1no <= PD1X(~0); pde1no++){

		  // only look at mapped page tables
	    if (!(pd1[pde1no] & PTE_V))
		continue;

	    pa   = PTE_ADDR(pd1[pde1no]);
	    pd2   = (pde_t*) KADDR(pa);

	    for(pde2no = 0; pde2no <= PD2X(~0); pde2no++){

		// only look at mapped page tables
		if (!(pd2[pde2no] & PTE_V))
		    continue;


		pa = PTE_ADDR(pd2[pde2no]);
		pt = (pde_t*) KADDR(pa);

		// unmap all PTEs in this page table
		for (pteno = 0; pteno <= PTX(~0); pteno++) {
		    if (pt[pteno] & PTE_V)
		      page_remove(e->env_pgdir, PGADDR(pdeno, pde1no, pde2no, pteno, 0));
		}
		
		// free the page table itself
		pd2[pde2no] = 0;
		page_decref(pa2page(pa));

	    }

	    // free the page table itself
	    pd1[pde1no] = 0;
	    page_decref(pa2page(pa));

	  }

	// free the page table itself
	e->env_pgdir[pdeno] = 0;
	page_decref(pa2page(pa));
     }

    // free the page directory
    pa = PADDR(e->env_pgdir);
    e->env_pgdir = 0;
    page_decref(pa2page(pa));

    // return the environment to the free list
    e->env_status = ENV_FREE;
    e->env_link = env_free_list;
    env_free_list = e;
}

#+end_src

I will do some necessary check to fix it, and some tests to it. The bug report is pa is used multiple times which causes the page to decref many times.

** user-level page fault process
The user level page fault process must handle the orig_a0 problem, in case of after ecall yield then page fault, when recovered from kernel mode and then jumped into pagefault entry, the entry address is plus 4 which causes invalid instruction error.

