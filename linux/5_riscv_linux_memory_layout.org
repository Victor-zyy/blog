* Memory Layout
for rv64, 0~0xffffffffffffffff memory space can be used, so a great and soundable memory layout design is necessary.
arch/riscv/include/asm/pgtable.h
arch/riscv/include/asm/page.h
arch/riscv/Kconfig
#+begin_src c
config PAGE_OFFSET
      hex
      default 0xC0000000 if 32BIT
      default 0x80000000 if 64BIT && !MMU
      default 0xffffffe000000000 if 64BIT
#+end_src

#+begin_src c
  #define PAGE_OFFSET		_AC(CONFIG_PAGE_OFFSET, UL)// 0xffffffe000000000
  #define ADDRESS_SPACE_END	(UL(-1)) // 0xffffffffffffffff

  #ifdef CONFIG_64BIT
  /* Leave 2GB for kernel and BPF at the end of the address space */
  #define KERNEL_LINK_ADDR	(ADDRESS_SPACE_END - SZ_2G + 1)
  #else
  #define KERNEL_LINK_ADDR	PAGE_OFFSET
  #endif

  #define KERN_VIRT_SIZE   (-PAGE_OFFSET) // 
  #define VMALLOC_SIZE     (KERN_VIRT_SIZE >> 1)
  #define VMALLOC_END      (PAGE_OFFSET - 1)
  #define VMALLOC_START    (PAGE_OFFSET - VMALLOC_SIZE)

  /* Modules always live before the kernel */
  #ifdef CONFIG_64BIT
  #define MODULES_VADDR	(PFN_ALIGN((unsigned long)&_end) - SZ_2G)
  #define MODULES_END	        (PFN_ALIGN((unsigned long)&_start))
  #endif

  #define BPF_JIT_REGION_SIZE	(SZ_128M)
  #ifdef CONFIG_64BIT
  #define BPF_JIT_REGION_START	(BPF_JIT_REGION_END - BPF_JIT_REGION_SIZE)
  #define BPF_JIT_REGION_END	(MODULES_END)
  #else
  #define BPF_JIT_REGION_START	(PAGE_OFFSET - BPF_JIT_REGION_SIZE)
  #define BPF_JIT_REGION_END	(VMALLOC_END)
  #endif
#+end_src
