* Atomic Variable
Considering the same scenario which two kthreads add the same global var, it will cause race condition, in order to avoid that we then use lock, mutex, spinlock, etc. Like that below,
kthread1
#+begin_src c
lock(); //spinlock or mutex 

etx_global_variable++; //Accessing the variable 

unlock();
#+end_src
kthread2
#+begin_src c
  lock(); //spinlock or mutex 

etx_global_variable++; //Accessing the variable 

unlock();
#+end_src

Why donâ€™t we have an alternate method for a single variable? Yes, obviously we have an alternate mechanism for integer and long variables. That is the atomic operation. If you use mutex/spinlock for just a single variable, it will add overhead.

** atomic types

1. Atomic variables that operate on Integers
2. Atomic variables that operate on Individual Bits
** atomic struct
defined in include/linux/types.h
#+begin_src c
typedef struct {
	int counter;
} atomic_t;

#define ATOMIC_INIT(i) { (i) }

#ifdef CONFIG_64BIT
typedef struct {
	s64 counter;
} atomic64_t;
#endif
#+end_src
Actually, a set of atomic operations are unique between archs. Everything you do an atomic operation, you need create the atomic_t or atomic64_t first.

** atomic operations
defined in /include/linux/atomic/atomic-instrumented.h
#+begin_src c
atomic64_t etx_global_variable = ATOMIC64_INIT(0);
long atomic64_read(atomic64_t *v);
void atomic64_set(atomic64_t *v, int i);
void atomic64_add(int i, atomic64_t *v);
void atomic64_sub(int i, atomic64_t *v);
void atomic64_inc(atomic64_t *v);
void atomic64_dec(atomic64_t *v);
int atomic64_sub_and_test(int i, atomic64_t *v);
int atomic64_add_negative(int i, atomic64_t *v);
long atomic64_add_return(int i, atomic64_t *v);
long atomic64_sub_return(int i, atomic64_t *v);
long atomic64_inc_return(int i, atomic64_t *v);
long atomic64_dec_return(int i, atomic64_t *v);
int atomic64_dec_and_test(atomic64_t *v);
int atomic64_inc_and_test(atomic64_t *v);
#+end_src
Test suffix means test the result is zero or not after operations.
** bit oprerations
defined in linux/asm-generic/bitops/instrumented-atomic.h
#+begin_src c
void set_bit(int nr, void *addr) 	//Atomically set the nr-th bit starting from addr
void clear_bit(int nr, void *addr) 	//Atomically clear the nr-th bit starting from addr
void change_bit(int nr, void *addr) 	//Atomically flip the value of the nr-th bit starting from addr
int test_and_set_bit(int nr, void *addr) 	//Atomically set the nr-th bit starting from addr and return the previous value
int test_and_clear_bit(int nr, void *addr) 	//Atomically clear the nr-th bit starting from addr and return the previous value
int test_and_change_bit(int nr, void *addr) 	//Atomically flip the nr-th bit starting from addr and return the previous value
int test_bit(int nr, void *addr) 	//Atomically return the value of the nr-th bit starting from addr
int find_first_zero_bit(unsigned long *addr, unsigned int size) 	//Atomically returns the bit-number of the first zero bit, not the number of the byte containing a bit
int find_first_bit(unsigned long *addr, unsigned int size) 	//Atomically returns the bit-number of the first set bit, not the number of the byte containing a bit
#+end_src
When we have code that is already locked by mutex/spinlock then we can go for this non-atomic version. This might be faster in that case.
defined in linux/asm-generic/bitops/instrumented-no-atomic.h
#+begin_src c
void _set_bit(int nr, void *addr) 	//Non-atomically set the nr-th bit starting from addr
void _clear_bit(int nr, void *addr) 	//Non-atomically clear the nr-th bit starting from addr
void _change_bit(int nr, void *addr) 	//Non-atomically flip the value of the nr-th bit starting from addr
int _test_and_set_bit(int nr, void *addr) 	//Non-atomically set the nr-th bit starting from addr and return the previous value
int _test_and_clear_bit(int nr, void *addr) 	//Non-atomically clear the nr-th bit starting from addr and return the previous value
int _test_and_change_bit(int nr, void *addr) 	//Non-atomically flip the nr-th bit starting from addr and return the previous value
int _test_bit(int nr, void *addr) 	//Non-atomically return the value of t
#+end_src

* Template
In riscv alignment is the most important thing, if we don't do this it will pose a oops in linux kernel.
#+begin_src sh
[] oops load address misaligned [#1]
#+end_src
So we align the var that is used in atomic operations.
#+begin_src c

__attribute__((__aligned__(8)))
atomic_t etx_global_variable = ATOMIC_INIT(0);      //Atomic integer variable
__attribute__((__aligned__(8)))
unsigned int etc_bit_check = 0;
int thread_function1(void *pv)
{
    unsigned int prev_value = 0;
    
    while(!kthread_should_stop()) {
        atomic_inc(&etx_global_variable);
        prev_value = test_and_change_bit(1, (void*)&etc_bit_check);
        pr_info("Function1 [value : %u] [bit:%u]\n", atomic_read(&etx_global_variable), prev_value);
        msleep(1000);
    }
    return 0;
}
 
/*
**kernel thread function 2
*/
int thread_function2(void *pv)
{
    unsigned int prev_value = 0;
    while(!kthread_should_stop()) {
        atomic_inc(&etx_global_variable);
        prev_value = test_and_change_bit(1,(void*) &etc_bit_check);
        pr_info("Function2 [value : %u] [bit:%u]\n", atomic_read(&etx_global_variable), prev_value);
        msleep(1000);
    }
    return 0;
}
#+end_src

#+begin_src sh
  ~ # modprobe driver-atomic
[   25.550415] driver_atomic: loading out-of-tree module taints kernel.
[   25.578260] Major = 249 Minor = 0 
[   25.580870] Kthread1 Created Successfully...
[   25.581694] Function1 [value : 1] [bit:0]
[   25.582320] Kthread2 Created Successfully...
[   25.582644] Device Driver Insert...Done!!!
~ # [   25.594929] Function2 [value : 2] [bit:1]
[   26.609555] Function2 [value : 3] [bit:0]
[   26.610568] Function1 [value : 4] [bit:1]
[   27.633263] Function1 [value : 5] [bit:0]
[   27.634162] Function2 [value : 6] [bit:1]
[   28.656982] Function2 [value : 7] [bit:0]
[   28.657706] Function1 [value : 8] [bit:1]
[   29.681304] Function1 [value : 9] [bit:0]
[   29.682351] Function2 [value : 10] [bit:1]
[   30.705322] Function2 [value : 11] [bit:0]
[   30.706536] Function1 [value : 12] [bit:1]
mo[   31.729349] Function1 [value : 13] [bit:0]
[   31.730647] Function2 [value : 14] [bit:1]
~ # modprobe [   32.753239] Function2 [value : 15] [bit:0]
[   32.754253] Function1 [value : 16] [bit:1]
-r[   33.777533] Function1 [value : 17] [bit:0]
[   33.778581] Function2 [value : 18] [bit:1]
 [   34.801879] Function2 [value : 19] [bit:0]
[   34.802753] Function1 [value : 20] [bit:1]
[   35.825813] Function1 [value : 21] [bit:0]
[   35.826795] Function2 [value : 22] [bit:1]
dri[   36.849737] Function2 [value : 23] [bit:0]
[   36.850842] Function1 [value : 24] [bit:1]
ver-at[   37.873321] Function1 [value : 25] [bit:0]
[   37.874124] Function2 [value : 26] [bit:1]
omic
[   38.896953] Function2 [value : 27] [bit:0]
[   38.897408] Function1 [value : 28] [bit:1]
[   39.921506] Function2 [value : 29] [bit:0]
[   40.951130] Device Driver Remove...Done!!
#+end_src
