* /proc
#+begin_src sh
  /proc/meminfo - gives the details of memory info in system
  /proc/modules - gives details of the modules that reside in kernel
  /proc/devices — registered character and block major numbers
  /proc/iomem — on-system physical RAM and bus device addresses
  /proc/ioports — on-system I/O port addresses (especially for x86 systems)
  /proc/interrupts — registered interrupt request numbers
  /proc/softirqs — registered soft IRQs
  /proc/swaps — currently active swaps
  /proc/kallsyms — running kernel symbols, including from loaded modules
  /proc/partitions — currently connected block devices and their partitions
  /proc/filesystems — currently active filesystem drivers
  /proc/cpuinfo — information about the CPU(s) on the system
#+end_src

proc directory usage:
The proc file system is also very useful when we want to *debug a kernel module*. While debugging we might want to know the values of various variables in the module or maybe the data that the module is handling. In such situations, we can create a proc entry for ourselves and dump whatever data we want to look into in the entry.

Also, the proc/ directory is one of the ways to communicate between kernel space and user space.
** proc entry
1. An entry that only reads data from the kernel space.
2. An entry that reads as well as writes data into and from kernel space.

** create directory in /proc/
This function is defined in fs/proc/generic.c, and it can be used for debug, like that below.
#+begin_src c
struct proc_dir_entry *proc_mkdir(const char *name,
            struct proc_dir_entry *parent)
{
    return proc_mkdir_data(name, 0, parent, NULL);
}
fs/jfs/jfs_debug.c:59:	base = proc_mkdir("fs/jfs", NULL);
#+end_src
name : refered as under /proc/ directory.
parent: refered as whose the parent is like /proc/fs etc.

** create /proc entry
#+begin_src c
struct proc_dir_entry *proc_create(const char *name, umode_t mode, struct proc_dir_entry *parent, const struct proc_ops *proc_ops);
// example like: 
proc_create("etx_proc",0666,NULL,&proc_fops);
#+end_src
** remove proc entry
#+begin_src c
void remove_proc_entry(const char *name, struct proc_dir_entry *parent);
#+end_src
And you can remove the complete parent directory using *proc_remove(struct proc_dir_entry *parent)*.
* Template
#+begin_src c
  #if ( LINUX_KERNEL_VERSION > 505 )

/*
**procfs operation sturcture
*/
static struct proc_ops proc_fops = {
        .proc_open = open_proc,
        .proc_read = read_proc,
        .proc_write = write_proc,
        .proc_release = release_proc
};


/*
**This function will be called when we open the procfs file
*/
static int open_proc(struct inode *inode, struct file *file)
{
    pr_info("proc file opend.....\t");
    return 0;
}

/*
**This function will be called when we close the procfs file
*/
static int release_proc(struct inode *inode, struct file *file)
{
    pr_info("proc file released.....\n");
    return 0;
}

/*
**This function will be called when we read the procfs file
*/
static ssize_t read_proc(struct file *filp, char __user *buffer, size_t length,loff_t * offset)
{
    pr_info("proc file read.....\n");
    if(len)
    {
        len=0;
    }
    else
    {
        len=1;
        return 0;
    }
    
    if( copy_to_user(buffer,etx_array,20) )
    {
        pr_err("Data Send : Err!\n");
    }
 
    return length;;
}

/*
**This function will be called when we write the procfs file
*/
static ssize_t write_proc(struct file *filp, const char *buff, size_t len, loff_t * off)
{
    pr_info("proc file wrote.....\n");
    
    if( copy_from_user(etx_array,buff,len) )
    {
        pr_err("Data Write : Err!\n");
    }
    
    return len;
}

/*
**Module Init function
*/
static int __init etx_driver_init(void)
{
        /*Allocating Major number*/
        if((alloc_chrdev_region(&dev, 0, 1, "etx_Dev")) <0){
                pr_info("Cannot allocate major number\n");
                return -1;
        }
        pr_info("Major = %d Minor = %d \n",MAJOR(dev), MINOR(dev));
 
        /*Creating cdev structure*/
        cdev_init(&etx_cdev,&fops);
 
        /*Adding character device to the system*/
        if((cdev_add(&etx_cdev,dev,1)) < 0){
            pr_info("Cannot add the device to the system\n");
            goto r_class;
        }
 
        /*Creating struct class*/
        if(IS_ERR(dev_class = class_create(THIS_MODULE,"etx_class"))){
            pr_info("Cannot create the struct class\n");
            goto r_class;
        }
 
        /*Creating device*/
        if(IS_ERR(device_create(dev_class,NULL,dev,NULL,"etx_device"))){
            pr_info("Cannot create the Device 1\n");
            goto r_device;
        }
        
        /*Create proc directory. It will create a directory under "/proc" */
        parent = proc_mkdir("etx",NULL);
        
        if( parent == NULL )
        {
            pr_info("Error creating proc entry");
            goto r_device;
        }
        
        /*Creating Proc entry under "/proc/etx/" */
        proc_create("etx_proc", 0666, parent, &proc_fops);
 
        pr_info("Device Driver Insert...Done!!!\n");
        return 0;
 
r_device:
        class_destroy(dev_class);
r_class:
        unregister_chrdev_region(dev,1);
        return -1;
}
 
/*
**Module exit function
*/
static void __exit etx_driver_exit(void)
{
        /* Removes single proc entry */
        //remove_proc_entry("etx/etx_proc", parent);
        
        /* remove complete /proc/etx */
        proc_remove(parent);
        
        device_destroy(dev_class,dev);
        class_destroy(dev_class);
        cdev_del(&etx_cdev);
        unregister_chrdev_region(dev, 1);
        pr_info("Device Driver Remove...Done!!!\n");
}
 
module_init(etx_driver_init);
module_exit(etx_driver_exit);
#+end_src
