* Linux Linker File
** 1.find liker file
#+begin_src sh
zyy@ubuntu:~/repo/linux-5.15.175$ find . -type f -name "*.ld*" | grep -i riscv
./arch/riscv/boot/loader.lds.S
./arch/riscv/include/generated/asm/vmlinux.lds.h
./arch/riscv/include/asm/module.lds.h
./arch/riscv/kernel/vmlinux.lds.S
./arch/riscv/kernel/.vmlinux.lds.cmd
./arch/riscv/kernel/vdso/vdso.lds.S
./arch/riscv/kernel/vdso/.vdso.lds.cmd
./arch/riscv/kernel/vdso/vdso.lds
./arch/riscv/kernel/vmlinux-xip.lds.S
./arch/riscv/kernel/vmlinux.lds

#+end_src

** 2. arch/riscv/kernel/vmlinux.lds.S
如果我们打开此文件，会发现这个文件是如此的复杂，但作为链接文件，我们必须要关注一些重点。不管怎样，linux最终会静态链接成一个image文件，因此即便链接文件再复杂，总归绕不开那几个段.data,.text.bss.等等。
*** 2.1 entry
#+begin_src ld
ENTRY(_start)
 . = ((((-1))) - 0x80000000 + 1);
 _start = .;
#+end_src
The ENTRY symbol in linker file indicates that the linker address of a program when it starts. *.* symbol indicates the linker address is ((-1) - 0x80000000 + 1), so where it is ? Using readelf to see the address is a good way to check.
*** 2.2 _start linker address
#+begin_src sh
  zyy@ubuntu:~/repo/linux-5.15.175$ riscv64-linux-gnu-readelf -h vmlinux
ELF Header:
  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF64
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           RISC-V
  Version:                           0x1
  Entry point address:               0xffffffff80000000
  Start of program headers:          64 (bytes into file)
  Start of section headers:          110274632 (bytes into file)
  Flags:                             0x1, RVC, soft-float ABI
  Size of this header:               64 (bytes)
  Size of program headers:           56 (bytes)
  Number of program headers:         9
  Size of section headers:           64 (bytes)
  Number of section headers:         39
  Section header string table index: 38
#+end_src
Our Arch is for rv64, which has the 64-bit address space, for 0x0 ~ 0xffffffffffffffff. So the -1 is 0xffffffffffffffff in hex of 2's complementary format.
*** 2.3 head section
To find the .head section location, using the grep command in shell. And we should know that, _start is the first .text section to loaded in the linker file, so the _start in the .head section.
#+begin_src sh
grep -nwr "_start" | grep -i riscv 
arch/riscv/kernel/head.S:30:ENTRY(_start)
arch/riscv/kernel/head.S:63:	.dword _end - _start
arch/riscv/kernel/head.S:72:	.word pe_head_start - _start
arch/riscv/kernel/head.S:87:	la a2, _start
arch/riscv/kernel/head.S:202:END(_start)
#+end_src

#+begin_src ld
 .head.text : AT(ADDR(.head.text) - ((((-1))) - 0x80000000 + 1)) { KEEP(*(.head.text)) }
#+end_src
If we wanna check the .head.text LMA, we can use the readelf -l command plus options to display all the loadable segment and their LMA and VMA.
If we don't specify the LMA using AT inside-function, the VMA of a section equals VMA.
#+begin_src asm
  ADDR() return the VMA address
  "*" means all the input sections of .head.text are put into this section
  KEEP meansLD keeps the symbols in the section even if symbols are not referenced. (--gc-sections).Usually used for sections that have some special meaning in the binary startup process, more or less to mark the roots of the dependency tree. 
#+end_src
*** 2.4 arch/riscv/kernel/head.S
#+begin_src asm
#define __HEAD		.section	".head.text","ax"
  __HEAD
  ENTRY(_start)
  	.....
  END(_start)
#+end_src
The __HEAD macro gives the attributes of this section like where to locate or whether it can be executed or not etc. To find the __HEAD macro defined in .h file.
#+begin_src sh
zyy@ubuntu:~/repo/linux-5.15.175$ find . -type f -name "*.h" | xargs grep -nwr "__HEAD"
./include/linux/init.h:95:#define __HEAD		.section	".head.text","ax"
./arch/powerpc/kernel/head_32.h:183:	__HEAD;					\
./arch/powerpc/kernel/head_32.h:190:	__HEAD;					\
./arch/powerpc/kernel/head_32.h:204:	__HEAD

#+end_src

*** 2.5 .text sepcial section
There are some special sections in each object file, like .sched.text, in linux, they use __section to define some functions attribute to place a special function in a special section.

include/linux/compiler_attributes.h file
#+begin_src c
/*
 *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-section-function-attribute
 *   gcc: https://gcc.gnu.org/onlinedocs/gcc/Common-Variable-Attributes.html#index-section-variable-attribute
 * clang: https://clang.llvm.org/docs/AttributeReference.html#section-declspec-allocate
 */
#define __section(section)              __attribute__((__section__(section)))
#+end_src

How to use this symbol section, an example down below.
#+begin_src c
kernel/locking/rtmutex_api.c:540:void __sched mutex_lock(struct mutex *lock)
kernel/locking/rtmutex_api.c:546:int __sched mutex_lock_interruptible(struct mutex *lock)
kernel/locking/rtmutex_api.c:552:int __sched mutex_lock_killable(struct mutex *lock)
kernel/locking/rtmutex_api.c:558:void __sched mutex_lock_io(struct mutex *lock)
kernel/locking/rtmutex_api.c:568:int __sched mutex_trylock(struct mutex *lock)
kernel/locking/rtmutex_api.c:583:void __sched mutex_unlock(struct mutex *lock)
#+end_src
There are lots of functions and variables defined in this way, and lined into .text section.

#+begin_src sh
 .text : {
  _text = .;
  _stext = .;
  . = ALIGN(0); *(.text.hot .text.hot.*) *(.text .text.fixup) *(.text.unlikely .text.unlikely.*) *(.text.unknown .text.unknown.*)
  . = ALIGN(0); __noinstr_text_start = .; *(.noinstr.text) __noinstr_text_end = .; *(.text..refcount) *(.ref.text) *(.text.asan.* .text.tsan.*)
  . = ALIGN(0); __sched_text_start = .; *(.sched.text) __sched_text_end = .;
  . = ALIGN(0); __cpuidle_text_start = .; *(.cpuidle.text) __cpuidle_text_end = .;
  . = ALIGN(0); __lock_text_start = .; *(.spinlock.text) __lock_text_end = .;
  . = ALIGN(0); __kprobes_text_start = .; *(.kprobes.text) __kprobes_text_end = .;
  . = ALIGN(0); __entry_text_start = .; *(.entry.text) __entry_text_end = .;
  . = ALIGN(0); __irqentry_text_start = .; *(.irqentry.text) __irqentry_text_end = .;
  . = ALIGN(0); __softirqentry_text_start = .; *(.softirqentry.text) __softirqentry_text_end = .;
  *(.fixup)
  _etext = .;
 }
#+end_src

ALIGN gives the next address that aligns to the bytes inside function.
#+begin_src sh
  . = ALIGN((1 << (12)));
   next address that aligns to 4096Bytes
   ALIGN(0)
#+end_src

*** 2.6 special sections
**** fixup
exception table entry
**** text.unknown
**** text.unlikely
**** text.hot
**** text.asan
**** text.tsan
**** text.ref
**** refcount.text
*** 2.7 init.text
#+begin_src sh
  . = ALIGN((1 << 21));
  __init_begin = .;
  __init_text_begin = .;
  .init.text : AT(ADDR(.init.text) - ((((-1))) - 0x80000000 + 1)) ALIGN((1 << 21)) { _sinittext = .; *(.init.text .init.text.*) *(.text.startup) *(.meminit.text*) _einittext = .; }

#+end_src
You may wonder what to place into the .init.text, same thing as we did in .sched.text,
#+begin_src c
#define __init		__section(".init.text") __cold  __latent_entropy __noinitretpoline __nocfi
#define __INIT		.section	".init.text","ax"
#+end_src
Functions and variables like 
#+begin_src c
kernel/events/core.c:13698:void __init perf_event_init(void)
kernel/events/core.c:13739:static int __init perf_event_sysfs_init(void)
kernel/events/hw_breakpoint.c:679:int __init init_hw_breakpoint(void)
kernel/context_tracking.c:191:void __init context_tracking_cpu_set(int cpu)
kernel/context_tracking.c:216:void __init context_tracking_init(void)
kernel/bpf/task_iter.c:589:static int __init task_iter_init(void)
kernel/bpf/stackmap.c:727:static int __init stack_map_init(void)
kernel/bpf/trampoline.c:641:static int __init init_trampolines(void)
#+end_src

*** 2.8 soc_related
soc_early_init_table
#+begin_src c
#define SOC_EARLY_INIT_DECLARE(name, compat, fn)			\
	static const struct of_device_id __soc_early_init__##name	\
		__used __section("__soc_early_init_table")		\
		 = { .compatible = compat, .data = fn  }

void soc_early_init(void);

extern unsigned long __soc_early_init_table_start;
extern unsigned long __soc_early_init_table_end;
#+end_src
soc_builtin_dtb_table
#+begin_src sh
 . = ALIGN(8);
  __soc_early_init_table : {
  __soc_early_init_table_start = .;
  KEEP(*(__soc_early_init_table))
  __soc_early_init_table_end = .;
 }
  __soc_builtin_dtb_table : {
  __soc_builtin_dtb_table_start = .;
  KEEP(*(__soc_builtin_dtb_table))
  __soc_builtin_dtb_table_end = .;
 }
#+end_src

*** 2.9 exit.text
For drivers.
#+begin_src c
#define __exit          __section(".exit.text") __exitused __cold notrace
drivers/staging/greybus/gbphy.c:349:static void __exit gbphy_exit(void)
drivers/staging/greybus/vibrator.c:241:static __exit void gb_vibrator_exit(void)
drivers/staging/greybus/arche-apb-ctrl.c:489:void __exit arche_apb_exit(void)
drivers/staging/greybus/fw-core.c:300:static void __exit fw_core_exit(void)
drivers/staging/greybus/audio_manager.c:175:static void __exit manager_exit(void)
#+end_src

*** 2.10 init_data exit_data
#+begin_src sh
 __init_data_begin = .;
 .init.data : AT(ADDR(.init.data) - ((((-1))) - 0x80000000 + 1)) { KEEP(*(SORT(___kentry+*))) *(.init.data init.data.*) *(.meminit.data*) *(.init.rodata .init.rodata.*) *(.meminit.rodata) . = ALIGN(8); __clk_of_table = .; KEEP(*(__clk_of_table)) KEEP(*(__clk_of_table_end)) . = ALIGN(8); __reservedmem_of_table = .; KEEP(*(__reservedmem_of_table)) KEEP(*(__reservedmem_of_table_end)) . = ALIGN(8); __timer_of_table = .; KEEP(*(__timer_of_table)) KEEP(*(__timer_of_table_end)) . = ALIGN(8); __cpu_method_of_table = .; KEEP(*(__cpu_method_of_table)) KEEP(*(__cpu_method_of_table_end)) . = ALIGN(32); __dtb_start = .; KEEP(*(.dtb.init.rodata)) __dtb_end = .; . = ALIGN(8); __irqchip_of_table = .; KEEP(*(__irqchip_of_table)) KEEP(*(__irqchip_of_table_end)) . = ALIGN(8); __earlycon_table = .; KEEP(*(__earlycon_table)) __earlycon_table_end = .; . = ALIGN(8); __kunit_suites_start = .; KEEP(*(.kunit_test_suites)) __kunit_suites_end = .; . = ALIGN(16); __setup_start = .; KEEP(*(.init.setup)) __setup_end = .; __initcall_start = .; KEEP(*(.initcallearly.init)) __initcall0_start = .; KEEP(*(.initcall0.init)) KEEP(*(.initcall0s.init)) __initcall1_start = .; KEEP(*(.initcall1.init)) KEEP(*(.initcall1s.init)) __initcall2_start = .; KEEP(*(.initcall2.init)) KEEP(*(.initcall2s.init)) __initcall3_start = .; KEEP(*(.initcall3.init)) KEEP(*(.initcall3s.init)) __initcall4_start = .; KEEP(*(.initcall4.init)) KEEP(*(.initcall4s.init)) __initcall5_start = .; KEEP(*(.initcall5.init)) KEEP(*(.initcall5s.init)) __initcallrootfs_start = .; KEEP(*(.initcallrootfs.init)) KEEP(*(.initcallrootfss.init)) __initcall6_start = .; KEEP(*(.initcall6.init)) KEEP(*(.initcall6s.init)) __initcall7_start = .; KEEP(*(.initcall7.init)) KEEP(*(.initcall7s.init)) __initcall_end = .; __con_initcall_start = .; KEEP(*(.con_initcall.init)) __con_initcall_end = .; . = ALIGN(4); __initramfs_start = .; KEEP(*(.init.ramfs)) . = ALIGN(8); KEEP(*(.init.ramfs.info)) }
 .exit.data :
 {
  *(.exit.data .exit.data.*) *(.fini_array .fini_array.*) *(.dtors .dtors.*) *(.memexit.data*) *(.memexit.rodata*)
 }
#+end_src
Those are simple like initcall section, data, etc. But ___kentry is kind of intersting, it is related to a macro defined in *include/linux/compiler.h*, and __used is defined in *include/linux/compiler-attributes.h*.
#+begin_src c
#define __used                          __attribute__((__used__))
#ifndef KENTRY
# define KENTRY(sym)						\
    extern typeof(sym) sym;					\
    static const unsigned long __kentry_##sym		\
    __used							\
    __attribute__((__section__("___kentry+" #sym)))		\
    = (unsigned long)&sym;
#endif
#+end_src
SORT is an alias for SORT_BY_NAME, SORT_BY_NAME,Normally, the linker will place files and sections matched by wildcards in the order in which they are seen during the link. You can change this by using the SORT_BY_NAME keyword, which appears before a wildcard pattern in parentheses (e.g., SORT_BY_NAME(.text*)). When the SORT_BY_NAME keyword is used, the linker will sort the files or sections into ascending order by name before placing them in the output file. 
*** 2.11 typeof
https://gcc.gnu.org/onlinedocs/gcc/Typeof.html
typeof is GNU extension, it will refer to a type of an expression, like sizeof, there are two ways of writing the argument to typeof, one for expression another one is for typename, for example
#+begin_src c
  typeof (x[0](1)) // the type described is that of the values of the functions.
  typeof (int *)  // the type described is that of pointers to int. 
#+end_src
A typeof construct can be used anywhere a typedef name can be used. For example, you can use it in a declaration, in a *cast*, or inside of *sizeof* or *typeof*.  typeof is often useful in conjunction with statement expressions.
#+begin_src c
  #define max(a,b) \
  ({ typeof (a) _a = (a); \
      typeof (b) _b = (b); \
    _a > _b ? _a : _b; })
  // using underscores of a var is to avoid conflict, and using { } to minimize the scope of a var which also avoids conficts.
#+end_src

*** 2.12 data..percpu
#+begin_src sh
 . = ALIGN((1 << (12))); .data..percpu : AT(ADDR(.data..percpu) - ((((-1))) - 0x80000000 + 1)) { __per_cpu_load = .; __per_cpu_start = .; *(.data..percpu..first) . = ALIGN((1 << (12))); *(.data..percpu..page_aligned) . = ALIGN((1 << 6)); *(.data..percpu..read_mostly) . = ALIGN((1 << 6)); *(.data..percpu) *(.data..percpu..shared_aligned) __per_cpu_end = .; }
#+end_src

*** 2.13 rely section
#+begin_src sh
 .rel.dyn : {
  *(.rel.dyn*)
 }
#+end_src
*** 2.14 alternative section
#+begin_src sh
 .alternative : {
  __alt_start = .;
  *(.alternative)
  __alt_end = .;
 }
#+end_src

*** 2.15 sdata and rodata section
#+begin_src sh
 _sdata = .;
 . = ALIGN(((1 << 21))); .rodata : AT(ADDR(.rodata) - ((((-1))) - 0x80000000 + 1)) { __start_rodata = .; *(.rodata) *(.rodata.*) . = ALIGN(32); __begin_sched_classes = .; *(__idle_sched_class) *(__fair_sched_class) *(__rt_sched_class) *(__dl_sched_class) *(__stop_sched_class) __end_sched_classes = .; . = ALIGN(8); __start_ro_after_init = .; *(.data..ro_after_init) . = ALIGN(8); __start___jump_table = .; KEEP(*(__jump_table)) __stop___jump_table = .; . = ALIGN(8); __start_static_call_sites = .; KEEP(*(.static_call_sites)) __stop_static_call_sites = .; __start_static_call_tramp_key = .; KEEP(*(.static_call_tramp_key)) __stop_static_call_tramp_key = .; __end_ro_after_init = .; . = ALIGN(8); __start___tracepoints_ptrs = .; KEEP(*(__tracepoints_ptrs)) __stop___tracepoints_ptrs = .; *(__tracepoints_strings) } .rodata1 : AT(ADDR(.rodata1) - ((((-1))) - 0x80000000 + 1)) { *(.rodata1) } .pci_fixup : AT(ADDR(.pci_fixup) - ((((-1))) - 0x80000000 + 1)) { __start_pci_fixups_early = .; KEEP(*(.pci_fixup_early)) __end_pci_fixups_early = .; __start_pci_fixups_header = .; KEEP(*(.pci_fixup_header)) __end_pci_fixups_header = .; __start_pci_fixups_final = .; KEEP(*(.pci_fixup_final)) __end_pci_fixups_final = .; __start_pci_fixups_enable = .; KEEP(*(.pci_fixup_enable)) __end_pci_fixups_enable = .; __start_pci_fixups_resume = .; KEEP(*(.pci_fixup_resume)) __end_pci_fixups_resume = .; __start_pci_fixups_resume_early = .; KEEP(*(.pci_fixup_resume_early)) __end_pci_fixups_resume_early = .; __start_pci_fixups_suspend = .; KEEP(*(.pci_fixup_suspend)) __end_pci_fixups_suspend = .; __start_pci_fixups_suspend_late = .; KEEP(*(.pci_fixup_suspend_late)) __end_pci_fixups_suspend_late = .; } .builtin_fw : AT(ADDR(.builtin_fw) - ((((-1))) - 0x80000000 + 1)) ALIGN(8) { __start_builtin_fw = .; KEEP(*(.builtin_fw)) __end_builtin_fw = .; } __ksymtab : AT(ADDR(__ksymtab) - ((((-1))) - 0x80000000 + 1)) { __start___ksymtab = .; KEEP(*(SORT(___ksymtab+*))) __stop___ksymtab = .; } __ksymtab_gpl : AT(ADDR(__ksymtab_gpl) - ((((-1))) - 0x80000000 + 1)) { __start___ksymtab_gpl = .; KEEP(*(SORT(___ksymtab_gpl+*))) __stop___ksymtab_gpl = .; } __kcrctab : AT(ADDR(__kcrctab) - ((((-1))) - 0x80000000 + 1)) { __start___kcrctab = .; KEEP(*(SORT(___kcrctab+*))) __stop___kcrctab = .; } __kcrctab_gpl : AT(ADDR(__kcrctab_gpl) - ((((-1))) - 0x80000000 + 1)) { __start___kcrctab_gpl = .; KEEP(*(SORT(___kcrctab_gpl+*))) __stop___kcrctab_gpl = .; } __ksymtab_strings : AT(ADDR(__ksymtab_strings) - ((((-1))) - 0x80000000 + 1)) { *(__ksymtab_strings) } __init_rodata : AT(ADDR(__init_rodata) - ((((-1))) - 0x80000000 + 1)) { *(.ref.rodata) } __param : AT(ADDR(__param) - ((((-1))) - 0x80000000 + 1)) { __start___param = .; KEEP(*(__param)) __stop___param = .; } __modver : AT(ADDR(__modver) - ((((-1))) - 0x80000000 + 1)) { __start___modver = .; KEEP(*(__modver)) __stop___modver = .; } . = ALIGN(16); __ex_table : AT(ADDR(__ex_table) - ((((-1))) - 0x80000000 + 1)) { __start___ex_table = .; KEEP(*(__ex_table)) __stop___ex_table = .; } /DISCARD/ : { *(.note.GNU-stack) } .notes : AT(ADDR(.notes) - ((((-1))) - 0x80000000 + 1)) { __start_notes = .; KEEP(*(.note.*)) __stop_notes = .; } . = ALIGN(((1 << 21))); __end_rodata = .;
 .srodata : {
  *(.srodata*)
 }
 . = ALIGN((1 << 21));
#+end_src
*** 2.16 data section
#+begin_src sh
 _data = .;
 . = ALIGN((1 << (12))); .data : AT(ADDR(.data) - ((((-1))) - 0x80000000 + 1)) { . = ALIGN((2 * ((1 << (12)) << (2 + 0)))); __start_init_task = .; init_thread_union = .; init_stack = .; KEEP(*(.data..init_task)) KEEP(*(.data..init_thread_info)) . = __start_init_task + ((1 << (12)) << (2 + 0)); __end_init_task = .; . = ALIGN((1 << (12))); __nosave_begin = .; *(.data..nosave) . = ALIGN((1 << (12))); __nosave_end = .; . = ALIGN((1 << (12))); *(.data..page_aligned) . = ALIGN((1 << (12))); . = ALIGN((1 << 6)); *(.data..cacheline_aligned) . = ALIGN((1 << 6)); *(.data..read_mostly) . = ALIGN((1 << 6)); *(.xiptext) *(.data) *(.data..decrypted) *(.ref.data) *(.data..shared_aligned) *(.data.unlikely) __start_once = .; *(.data.once) __end_once = .; . = ALIGN(32); *(__tracepoints) . = ALIGN(8); __start___dyndbg = .; KEEP(*(__dyndbg)) __stop___dyndbg = .; CONSTRUCTORS } . = ALIGN(8); __bug_table : AT(ADDR(__bug_table) - ((((-1))) - 0x80000000 + 1)) { __start___bug_table = .; KEEP(*(__bug_table)) __stop___bug_table = .; }
 .sdata : {
  __global_pointer$ = . + 0x800;
  *(.sdata*)
 }
 .pecoff_edata_padding : { BYTE(0); . = ALIGN(PECOFF_FILE_ALIGNMENT); }
 __pecoff_data_raw_size = ABSOLUTE(. - __pecoff_text_end);
 _edata = .;
#+end_src

*** 2.17 bss section
#+begin_src sh
 . = ALIGN((1 << (12))); __bss_start = .; . = ALIGN((1 << (12))); .sbss : AT(ADDR(.sbss) - ((((-1))) - 0x80000000 + 1)) { *(.dynsbss) *(.sbss) *(.scommon) } . = ALIGN((1 << (12))); .bss : AT(ADDR(.bss) - ((((-1))) - 0x80000000 + 1)) { . = ALIGN((1 << (12))); *(.bss..page_aligned) . = ALIGN((1 << (12))); *(.dynbss) *(.bss) *(COMMON) } . = ALIGN(0); __bss_stop = .;
 . = ALIGN(PECOFF_SECTION_ALIGNMENT);
 __pecoff_data_virt_size = ABSOLUTE(. - __pecoff_text_end);
 _end = .;
#+end_src

*** 2.18 symbol section
#+begin_src sh
 .stab 0 : { *(.stab) } .stabstr 0 : { *(.stabstr) } .stab.excl 0 : { *(.stab.excl) } .stab.exclstr 0 : { *(.stab.exclstr) } .stab.index 0 : { *(.stab.index) } .stab.indexstr 0 : { *(.stab.indexstr) }
 .debug 0 : { *(.debug) } .line 0 : { *(.line) } .debug_srcinfo 0 : { *(.debug_srcinfo) } .debug_sfnames 0 : { *(.debug_sfnames) } .debug_aranges 0 : { *(.debug_aranges) } .debug_pubnames 0 : { *(.debug_pubnames) } .debug_info 0 : { *(.debug_info .gnu.linkonce.wi.*) } .debug_abbrev 0 : { *(.debug_abbrev) } .debug_line 0 : { *(.debug_line) } .debug_frame 0 : { *(.debug_frame) } .debug_str 0 : { *(.debug_str) } .debug_loc 0 : { *(.debug_loc) } .debug_macinfo 0 : { *(.debug_macinfo) } .debug_pubtypes 0 : { *(.debug_pubtypes) } .debug_ranges 0 : { *(.debug_ranges) } .debug_weaknames 0 : { *(.debug_weaknames) } .debug_funcnames 0 : { *(.debug_funcnames) } .debug_typenames 0 : { *(.debug_typenames) } .debug_varnames 0 : { *(.debug_varnames) } .debug_gnu_pubnames 0 : { *(.debug_gnu_pubnames) } .debug_gnu_pubtypes 0 : { *(.debug_gnu_pubtypes) } .debug_types 0 : { *(.debug_types) } .debug_addr 0 : { *(.debug_addr) } .debug_line_str 0 : { *(.debug_line_str) } .debug_loclists 0 : { *(.debug_loclists) } .debug_macro 0 : { *(.debug_macro) } .debug_names 0 : { *(.debug_names) } .debug_rnglists 0 : { *(.debug_rnglists) } .debug_str_offsets 0 : { *(.debug_str_offsets) }
 .comment 0 : { *(.comment) } .symtab 0 : { *(.symtab) } .strtab 0 : { *(.strtab) } .shstrtab 0 : { *(.shstrtab) }
#+end_src

*** 2.19 discard
#+begin_src sh
 /DISCARD/ : { *(.exit.text) *(.text.exit) *(.memexit.text) *(.exit.data .exit.data.*) *(.fini_array .fini_array.*) *(.dtors .dtors.*) *(.memexit.data*) *(.memexit.rodata*) *(.exitcall.exit) *(.discard) *(.discard.*) *(.modinfo) *(.gnu.version*) }
#+end_src
